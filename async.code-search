# Query: async
# ContextLines: 1

69 results - 36 files

middleware.js:
  2  
  3: export async function middleware(request) {
  4    const session = request.cookies.get("session_firebase_user");

package-lock.json:
   385          "@firebase/app": "0.x",
   386:         "@react-native-async-storage/async-storage": "^1.18.1"
   387        },
   388        "peerDependenciesMeta": {
   389:         "@react-native-async-storage/async-storage": {
   390            "optional": true

   859          "abort-controller": "^3.0.0",
   860:         "async-retry": "^1.3.3",
   861          "compressible": "^2.0.12",

  1414        "dependencies": {
  1415:         "asynckit": "^0.4.0",
  1416          "combined-stream": "^1.0.6",

  1572      },
  1573:     "node_modules/async-retry": {
  1574        "version": "1.3.3",
  1575:       "resolved": "https://registry.npmjs.org/async-retry/-/async-retry-1.3.3.tgz",
  1576        "integrity": "sha512-wfr/jstw9xNi/0teMHrRW7dsz3Lt5ARhYNZ2ewpadnhaIp5mbALhOAP+EAdsC7t4Z6wqsDVv9+W6gm1Dk9mEyw==",

  1581      },
  1582:     "node_modules/asynckit": {
  1583        "version": "0.4.0",
  1584:       "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
  1585        "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="

  2441        "dependencies": {
  2442:         "asynckit": "^0.4.0",
  2443          "combined-stream": "^1.0.8",

actions\checkAuthList.js:
  1  "use server";
  2: export async function PaymentMethodList(code) {
  3    // Fetch customer

actions\getContactEmail.js:
  1: export async function GetContactEmail(username, email, message ){}

actions\getNewsletterEmail.js:
  1  import {} from "node"
  2: export async function GetNewsletterEmail(username, email, message ){}
  3  

actions\notifier.js:
  4  
  5: async function prevNotification(id) {
  6    return userDatabase(id, "notifications");

  8  
  9: export async function Notifier(userId, title, message) {
  10    try {

app\api\login\route.js:
   7  customInitApp();
   8: export async function POST(req, res) {
   9    const authorization = headers().get("Authorization");

  39  
  40: export async function GET() {
  41    const session = cookies().get("session_firebase_user")?.value || "";

app\api\namify\ai\route.js:
   9  
  10: export async function POST(req) {
  11    try {

app\api\namify\trademarkCheck\route.js:
  3  
  4: export async function POST(req) {
  5    try {

app\api\signOut\route.js:
  2  import { NextResponse } from "next/server";
  3: export async function POST(request) {
  4    const options = {

app\api\subscriptions\PaymentMethod\route.js:
  2  
  3: export async function POST(req) {
  4    const { email, userId } = await req.json();

app\api\subscriptions\verify_transaction\route.js:
  15  
  16: export async function GET(request) {
  17    const p = request.nextUrl.searchParams;

app\api\webhook\route.js:
  1  import crypto from "crypto";
  2: export const POST = async (req, res) => {
  3    const hashKey = crypto

app\auth\page.js:
  17      getRedirectResult(auth)
  18:       .then(async (userCred) => {
  19          if (!userCred) return;

app\overview\[uid]\_helper\_ProfilePage.js:
  24    useEffect(() => {
  25:     const userDb = async () => {
  26        const data = await userDatabase(user?.currentUser?.uid);

app\overview\[uid]\_helper\ProPlanPage.js:
  25    const [error, setError] = useState(null);
  26:   const ActivateSubscriptionToPaymentGateWay = async () => {
  27      //link to gateway

app\overview\[uid]\history\page.js:
  4  
  5: export default async function HistoryPage({ params }) {
  6    const listItems = await userDatabase(params.uid, "history");

app\overview\[uid]\name-availablity\page.js:
  29    useEffect(() => {
  30:     const pro_acc = async () => {
  31        const ispro = await IsPro(uid);

  40  
  41:   async function handleSubmit(ev) {
  42      ev.preventDefault();

app\overview\[uid]\notification\page.js:
  4  
  5: export default async function Notification({ params }) {
  6    const notification = await userDatabase(params.uid, "notifications");

app\overview\[uid]\settings\page.js:
  2  
  3: export default async function Settings() {
  4    return (

app\overview\[uid]\subscription\_freeplan.js:
   41    const [state, setResult] = useState(null);
   42:   const modifiedAction = async () => await SendEmailVerification(currentUser);
   43  

   56        <Button
   57:         onClick={async () => {
   58            const message = await modifiedAction();

   95    const { toggleModalInfo } = useModal();
   96:   const triggerSubscription = async () => {
   97      //Charge_Status, message,

  126    //binded function server
  127:   const sendOTP = async (E) => {
  128      E.preventDefault();

  276  
  277:   const InvokePayStackInitialize = async () => {
  278      if (!email || !uid) return;

app\overview\[uid]\subscription\_paidplan.js:
  23  
  24:   const ManageSub = async () => {
  25      const subLink = await ManageSubscription();

app\overview\[uid]\subscription\page.js:
  7  
  8: export default async function Subscription({ params }) {
  9    const isPro = await IsPro(params?.uid);

app\overview\[uid]\subscription\[SubCode]\page.js:
  6  
  7: export default async function ManageSubscription({ params }) {
  8    const sub_code = params.SubCode;

app\overview\[uid]\subscription\result\page.js:
  4  
  5: export default async function ResultPage({ params, searchParams }) {
  6    const payment_method = await checkPaymentMethod(

components\AiActivity.js:
  55  
  56: async function HistoryLoad(id, path) {
  57    try {

  69  
  70: export default async function AiActivity({ uid }) {
  71    const listItems = await HistoryLoad(uid, "history");

components\aiform.js:
  32  
  33:   async function callUser() {
  34      try {

  49  
  50:   async function handleSubmit(ev) {
  51      ev.preventDefault();

components\AuthForm.js:
  170  
  171:   const handleSubmit = async (e) => {
  172      e.preventDefault();

  200  
  201:   const handleGoogleLogin = async () => {
  202      try {

  209  
  210:   const handleGoogleLoginMobile = async () => {
  211      try {

components\dropdownModal.js:
  23  
  24:   const logout = async () => {
  25      //Log out from FIREBASE

components\NewsLetter.js:
  1: export default a function NewsLetter() {
  2    return (

components\ProfileNav.js:
  20    useEffect(() => {
  21:     const fetchPro = async () => {
  22        try {

components\SideDashboard.js:
   3  
   4: async function GetUserFunc(id) {
   5    try {

  11  
  12: export default async function SideDashboard({ uid }) {
  13    const user = await userDatabase(uid);

components\VerifyEmail.js:
  22  
  23:   const verifyUser = async () => {
  24      if (!person.currentUser) return;

lib\api-limits.js:
   6  
   7: export async function DecreaseAiLimit(userId, token_used) {
   8    if (!userId) {

  32  
  33: export async function TokenExceeded(text, tokenLeft) {
  34    // Check if text is within the token limit

  41  }
  42: export async function AiLimitReached(userId) {
  43    if (!userId) {

lib\BoolFunctions.js:
   2  
   3: export async function IsPro(uid) {
   4    try {

  22  
  23: export async function SubcriptionData(uid) {
  24    try {

  42  
  43: export async function checkPaymentMethod(uid, ref = null) {
  44    //Check refererences

utils\Provider\AuthProvider.js:
   22  
   23:   const SignInGoogle = async () => {
   24      return new Promise((resolve, reject) => {

   29        signInWithPopup(auth, new GoogleAuthProvider())
   30:         .then(async (userCred) => {
   31            if (!userCred) return;

   51    //SignOut!
   52:   const SignOut = async () => {
   53      if (!auth) {

   65  
   66:   const signUpEmail = async (emailStr, password, username) => {
   67      return new Promise((resolve, reject) => {

   72        createUserWithEmailAndPassword(auth, emailStr, password)
   73:         .then(async (userCred) => {
   74            //createExpirationCookies(userCred.stsTokenManger?.expires)

  104        signInWithEmailAndPassword(auth, emailStr, password)
  105:         .then(async (userCred) => {
  106            //createExpirationCookies(userCred.stsTokenManger?.expires)
